<%- include('../partials/user/header.ejs') %>

<style>
    body {
        background-color: #1a1a1a !important;
    }
    .wallet-container {
        padding: 2rem;
        background: rgba(255, 255, 255, 0.05);
        min-height: 100vh;
        border-radius: 20px;
        margin: 2rem 1rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .wallet-header {
        margin-bottom: 2.5rem;
        position: relative;
        padding-bottom: 1rem;
        color: #fff;
        font-size: 1.8rem;
        font-weight: 600;
    }
    .wallet-header::after {
        content: '';
        position: absolute;
        left: 0;
        bottom: 0;
        width: 50px;
        height: 3px;
        background: #e69823;
        border-radius: 2px;
    }
    .balance-card {
        background: rgba(255, 255, 255, 0.07);
        border-radius: 15px;
        padding: 2rem;
        margin-bottom: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        text-align: center;
    }
    .balance-label {
        color: #bce743;
        font-size: 1.2rem;
        margin-bottom: 1rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    .balance-amount {
        font-size: 2.5rem;
        font-weight: 700;
        color: #fff;
        margin-bottom: 1.5rem;
    }
    .add-money-btn {
        background: #e69823;
        color: #fff;
        border: none;
        padding: 1rem 2rem;
        border-radius: 10px;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    .add-money-btn:hover {
        background: #bce743;
        transform: translateY(-2px);
    }
    .transactions-section {
        background: rgba(255, 255, 255, 0.07);
        border-radius: 15px;
        padding: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .transactions-header {
        color: #bce743;
        font-size: 1.2rem;
        margin-bottom: 1.5rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    .transaction-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
    }
    .transaction-card:hover {
        transform: translateY(-3px);
        border-color: rgba(230, 152, 35, 0.3);
        box-shadow: 0 8px 25px rgba(230, 152, 35, 0.1);
    }
    .transaction-type {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    .transaction-type.credit {
        color: #4CAF50;
    }
    .transaction-type.debit {
        color: #ff4444;
    }
    .transaction-amount {
        font-size: 1.3rem;
        font-weight: 700;
        color: #fff;
        margin-bottom: 0.5rem;
    }
    .transaction-date {
        color: rgba(255, 255, 255, 0.6);
        font-size: 0.9rem;
    }
    .transaction-description {
        color: #fff;
        margin-top: 0.5rem;
        font-size: 1rem;
    }
    .modal-content {
        background: #2a2a2a;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 15px;
    }
    .modal-header {
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        padding: 1.5rem;
    }
    .modal-title {
        color: #fff;
        font-size: 1.3rem;
        font-weight: 600;
    }
    .modal-body {
        padding: 1.5rem;
    }
    .form-label {
        color: rgba(255, 255, 255, 0.8);
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }
    .form-control {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        color: #fff;
        padding: 0.8rem 1rem;
    }
    .form-control:focus {
        background: rgba(255, 255, 255, 0.08);
        border-color: #e69823;
        box-shadow: none;
    }
    .modal-footer {
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        padding: 1.5rem;
    }
    .no-transactions {
        text-align: center;
        padding: 3rem 2rem;
        color: rgba(255, 255, 255, 0.6);
    }
    .no-transactions i {
        font-size: 3rem;
        color: #e69823;
        margin-bottom: 1rem;
    }
    .no-transactions h3 {
        font-size: 1.3rem;
        color: #fff;
        margin-bottom: 0.5rem;
    }
    
    @media (max-width: 768px) {
        .wallet-container {
            padding: 1.5rem;
            margin: 1rem 0.5rem;
        }
        .balance-card {
            padding: 1.5rem;
        }
        .transactions-section {
            padding: 1.5rem;
        }
        .transaction-card {
            padding: 1.2rem;
        }
        .balance-amount {
            font-size: 2rem;
        }
    }
    
    .swal2-toast-success {
        background: #4caf50 !important;
        color: white !important;
    }

    .swal2-toast-error {
        background: #dc3545 !important;
        color: white !important;
    }

    .swal2-popup.swal2-toast {
        padding: 0.75rem 1.5rem !important;
        font-size: 0.875rem !important;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
        margin: 1rem !important;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <%- include('../partials/user/usersidebar.ejs') %>
        
        <div class="col-md-9">
            <div class="wallet-container">
                <h4 class="wallet-header">My Wallet</h4>
                <div class="row">
                    <div class="col-md-4">
                        <div class="balance-card">
                            <div class="balance-label">Wallet Balance</div>
                            <div class="balance-amount">₹<%= wallet.balance.toFixed(2) %></div>
                            <button class="add-money-btn" data-bs-toggle="modal" data-bs-target="#addMoneyModal">
                                Add Money
                            </button>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="transactions-section">
                            <div class="transactions-header">Transaction History</div>
                            <% if (wallet.transactions.length === 0) { %>
                            <div class="no-transactions">
                                <i class="fas fa-history"></i>
                                <h3>No transactions found.</h3>
                            </div>
                            <% } else { %>
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Description</th>
                                            <th>Amount</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% wallet.transactions.reverse().forEach(transaction => { %>
                                        <tr>
                                            <td><%= new Date(transaction.timestamp).toLocaleDateString() %></td>
                                            <td><%= transaction.description %></td>
                                            <td class="<%= transaction.type === 'credit' ? 'text-success' : 'text-danger' %>">
                                                <%= transaction.type === 'credit' ? '+' : '-' %>₹<%= transaction.amount.toFixed(2) %>
                                            </td>
                                            <td>
                                                <span class="badge bg-<%= transaction.status === 'completed' ? 'success' : (transaction.status === 'pending' ? 'warning' : 'danger') %>">
                                                    <%= transaction.status %>
                                                </span>
                                            </td>
                                        </tr>
                                        <% }) %>
                                    </tbody>
                                </table>
                            </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Money Modal -->
<div class="modal fade" id="addMoneyModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Money to Wallet</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addMoneyForm">
                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount (₹)</label>
                        <input type="number" class="form-control" id="amount" min="1" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Proceed to Pay</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
const razorpayKeyId = '<%= razorpayKeyId %>';

document.getElementById('addMoneyForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const amount = document.getElementById('amount').value;

    try {
        // Create order
        const orderResponse = await fetch('/wallet/create-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ amount })
        });
        const order = await orderResponse.json();

        // Initialize Razorpay
        const options = {
            key: razorpayKeyId,
            amount: order.amount,
            currency: order.currency,
            order_id: order.id,
            name: 'SneakerVerse',
            description: 'Add Money to Wallet',
            theme: {
                color: '#4CAF50'
            },
            handler: async function(response) {
                try {
                    // Verify payment
                    const verifyResponse = await fetch('/wallet/verify-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(response)
                    });
                    const result = await verifyResponse.json();
                    
                    if (result.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Money added to wallet successfully',
                            icon: 'success',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            customClass: {
                                popup: 'swal2-toast-success'
                            }
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Payment verification failed. Please contact support.',
                            icon: 'error',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            customClass: {
                                popup: 'swal2-toast-error'
                            }
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while processing your payment',
                        icon: 'error',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        customClass: {
                            popup: 'swal2-toast-error'
                        }
                    });
                }
            }
        };
        const rzp = new Razorpay(options);
        rzp.open();
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'An error occurred. Please try again.',
            icon: 'error',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            customClass: {
                popup: 'swal2-toast-error'
            }
        });
    }
});
</script>

<%- include('../partials/user/footer.ejs') %>