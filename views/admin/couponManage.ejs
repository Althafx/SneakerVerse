<%- include("../admin/adminPartials/sidebar") %>
<%- include('../admin/adminPartials/cursor') %>

<style>
    .content-wrapper {
        margin-left: 250px;
        padding: 20px;
        background: #f8f9fa;
        min-height: 100vh;
    }

    .card {
        background: #ffffff;
        border: none;
        border-radius: 15px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .card-header {
        background: #ffffff;
        border-bottom: 1px solid #edf2f9;
        padding: 1.25rem;
        border-radius: 15px 15px 0 0;
    }

    .card-body {
        padding: 1.25rem;
    }

    .btn-add-coupon {
        background: linear-gradient(45deg, #1e88e5, #1976d2);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .btn-add-coupon:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .table {
        width: 100%;
        margin-bottom: 0;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        color: #495057;
        background: #f8f9fa;
        padding: 1rem;
    }

    .table td {
        vertical-align: middle;
        padding: 1rem;
        color: #495057;
    }

    .badge {
        padding: 8px 12px;
        font-weight: 500;
        border-radius: 6px;
    }

    .badge-active {
        background: #dcf5e7;
        color: #28a745;
    }

    .badge-inactive {
        background: #fee5e5;
        color: #dc3545;
    }

    .btn-action {
        padding: 6px 12px;
        border-radius: 6px;
        margin: 0 3px;
        font-size: 14px;
    }

    .modal-content {
        border-radius: 15px;
        border: none;
    }

    .modal-header {
        border-radius: 15px 15px 0 0;
        background: linear-gradient(45deg, #1e88e5, #1976d2);
        color: white;
        border: none;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .form-control {
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        padding: 10px 15px;
        height: auto;
    }

    .form-control:focus {
        border-color: #1e88e5;
        box-shadow: 0 0 0 0.2rem rgba(30, 136, 229, 0.25);
    }

    .modal-footer {
        border-top: 1px solid #edf2f9;
        padding: 1rem;
    }

    .btn-submit {
        background: linear-gradient(45deg, #1e88e5, #1976d2);
        color: white;
        border: none;
        padding: 10px 25px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .btn-submit:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .empty-state {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
    }

    .empty-state i {
        font-size: 48px;
        margin-bottom: 15px;
        color: #dee2e6;
    }
</style>

<div class="content-wrapper">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Manage Coupons</h5>
            <button type="button" class="btn btn-add-coupon" data-bs-toggle="modal" data-bs-target="#addCouponModal">
                <i class="fas fa-plus me-2"></i>Add New Coupon
            </button>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Offer Amount</th>
                            <th>Min Purchase</th>
                            <th>Start Date</th>
                            <th>Expiry Date</th>
                            <th>Uses</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (coupons && coupons.length > 0) { %>
                            <% coupons.forEach(coupon => { %>
                                <tr>
                                    <td><strong><%= coupon.code %></strong></td>
                                    <td>₹<%= coupon.offerAmount %></td>
                                    <td>₹<%= coupon.minPurchase %></td>
                                    <td><%= new Date(coupon.startDate).toLocaleDateString() %></td>
                                    <td><%= new Date(coupon.expiryDate).toLocaleDateString() %></td>
                                    <td>
                                        <% const usedCount = coupon.usedCount || 0 %>
                                        <span class="<%= usedCount >= coupon.totalUses ? 'text-danger' : 'text-success' %>">
                                            <%= usedCount %>/<%= coupon.totalUses %>
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge <%= coupon.isActive ? 'badge-active' : 'badge-inactive' %>">
                                            <%= coupon.isActive ? 'Active' : 'Inactive' %>
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-action <%= coupon.isActive ? 'btn-danger' : 'btn-success' %>"
                                            onclick="toggleCouponStatus('<%= coupon._id %>', '<%= coupon.isActive %>')">
                                            <%= coupon.isActive ? 'Deactivate' : 'Activate' %>
                                        </button>
                                        <button class="btn btn-sm btn-action btn-danger" onclick="deleteCoupon('<%= coupon._id %>')">
                                            <i class="fas fa-trash-alt"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="8">
                                    <div class="empty-state">
                                        <i class="fas fa-ticket-alt"></i>
                                        <p>No coupons found. Create your first coupon!</p>
                                    </div>
                                </td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Coupon Modal -->
<div class="modal fade" id="addCouponModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Coupon</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addCouponForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Coupon Code</label>
                        <input type="text" class="form-control" name="code" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Offer Amount (₹)</label>
                        <input type="number" class="form-control" name="offerAmount" min="1" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Minimum Purchase Amount (₹)</label>
                        <input type="number" class="form-control" name="minPurchase" min="1" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="date" class="form-control" name="startDate" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Expiry Date</label>
                        <input type="date" class="form-control" name="expiryDate" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Total Uses</label>
                        <input type="number" class="form-control" name="totalUses" min="1" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Max Uses Per User</label>
                        <input type="number" class="form-control" name="maxUsesPerUser" min="1" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-submit">Add Coupon</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
document.getElementById('addCouponForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = {};
    formData.forEach((value, key) => data[key] = value);
    
    // Add date validation
    const startDate = new Date(data.startDate);
    const endDate = new Date(data.expiryDate);
    
    if (endDate < startDate) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Dates',
            text: 'End date cannot be before start date'
        });
        return;
    }

    // Add offer amount validation
    const offerAmount = parseFloat(data.offerAmount);
    const minPurchase = parseFloat(data.minPurchase);

    if (offerAmount >= minPurchase) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Amount',
            text: 'Offer amount must be less than minimum purchase amount'
        });
        return;
    }
    
    try {
        const response = await fetch('/admin/coupons/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Coupon added successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                location.reload();
            });
        } else {
            throw new Error(result.message || 'Failed to add coupon');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message
        });
    }
});

async function toggleCouponStatus(couponId, currentStatus) {
    try {
        const response = await fetch(`/admin/coupons/toggle/${couponId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: `Coupon ${currentStatus ? 'deactivated' : 'activated'} successfully`,
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    location.reload();
                });
            } else {
                throw new Error(result.message || 'Failed to update coupon status');
            }
        } else {
            throw new Error('Failed to update coupon status');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message
        });
    }
}

async function deleteCoupon(couponId) {
    try {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        });

        if (result.isConfirmed) {
            const response = await fetch(`/admin/coupons/delete/${couponId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: 'Coupon has been deleted.',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error(result.message || 'Failed to delete coupon');
                }
            } else {
                throw new Error('Failed to delete coupon');
            }
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message
        });
    }
}

// Set min date for date inputs and add end date validation
document.addEventListener('DOMContentLoaded', function() {
    const today = new Date().toISOString().split('T')[0];
    const startDateInput = document.querySelector('input[name="startDate"]');
    const endDateInput = document.querySelector('input[name="expiryDate"]');
    const offerAmountInput = document.querySelector('input[name="offerAmount"]');
    const minPurchaseInput = document.querySelector('input[name="minPurchase"]');
    
    startDateInput.min = today;
    endDateInput.min = today;
    
    // Update min end date when start date changes
    startDateInput.addEventListener('change', function() {
        endDateInput.min = this.value;
        if (endDateInput.value && new Date(endDateInput.value) < new Date(this.value)) {
            endDateInput.value = this.value;
        }
    });

    // Add real-time validation for offer amount
    function validateOfferAmount() {
        const offerAmount = parseFloat(offerAmountInput.value) || 0;
        const minPurchase = parseFloat(minPurchaseInput.value) || 0;
        
        if (offerAmount >= minPurchase && minPurchase !== 0) {
            offerAmountInput.setCustomValidity('Offer amount must be less than minimum purchase amount');
        } else {
            offerAmountInput.setCustomValidity('');
        }
    }

    offerAmountInput.addEventListener('input', validateOfferAmount);
    minPurchaseInput.addEventListener('input', validateOfferAmount);
});
</script>
