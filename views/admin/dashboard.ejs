<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - SneakerVerse</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            background-color: #1a1a1a;
            min-height: 100vh;
            color: #e0e0e0;
        }

        .dashboard-container {
            margin-left: 250px;
            padding: 20px;
            background: #1a1a1a;
            min-height: 100vh;
            color: #e0e0e0;
        }
        /* .form-select{
            background-color: #303F9F;
        } */

        .stat-card {
            background: linear-gradient(135deg, #2a2a2a 0%, #383838 100%);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s;
            border: 1px solid #404040;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            border-color: #505050;
        }

        .chart-container {
            background: linear-gradient(135deg, #2a2a2a 0%, #383838 100%);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            margin-bottom: 20px;
            border: 1px solid #404040;
            position: relative;
        }

        .pie-chart-container {
            height: 300px;
            position: relative;
            margin-bottom: 20px;
        }

        @media (max-width: 768px) {
            .pie-chart-container {
                height: 250px;
            }
        }

        .chart-title {
            font-size: 1.1rem;
            margin-bottom: 1rem;
            color: #e0e0e0;
            text-align: center;
        }

        .recent-orders {
            background: linear-gradient(135deg, #2a2a2a 0%, #383838 100%);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            border: 1px solid #404040;
        }

        .table {
            color: #e0e0e0;
        }

        .table thead th {
            border-bottom-color: #404040;
            color: #909090;
        }

        .table td {
            border-color: #404040;
        }

        .text-muted {
            color: #909090 !important;
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            margin-bottom: 15px;
        }

        .stat-users { background: linear-gradient(45deg, #00796B, #009688); }
        .stat-products { background: linear-gradient(45deg, #303F9F, #3F51B5); }
        .stat-orders { background: linear-gradient(45deg, #C2185B, #E91E63); }
        .stat-revenue { background: linear-gradient(45deg, #F57C00, #FF9800); }

        .download-btn {
            background: linear-gradient(45deg, #303F9F, #3F51B5);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            transition: all 0.2s;
        }

        .download-btn:hover {
            transform: translateY(-2px);
            background: linear-gradient(45deg, #3F51B5, #5C6BC0);
            color: white;
        }

        .order-status {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .status-delivered { background: #00796B; color: white; }
        .status-pending { background: #F57C00; color: white; }
        .status-processing { background: #303F9F; color: white; }

        .modal-content {
            background: linear-gradient(135deg, #2a2a2a 0%, #383838 100%);
            color: #ffffff;
            border: 1px solid #444;
        }

        .modal-header {
            border-bottom: 1px solid #444;
        }

        .modal-header .modal-title {
            color: #ffffff;
            font-weight: 600;
        }

        .modal-footer {
            border-top: 1px solid #444;
        }

        .form-select, .form-control {
            background-color: #2a2a2a;
            border: 1px solid #444;
            color: #ffffff;
        }

        .form-select:focus, .form-control:focus {
            background-color: #2a2a2a;
            border-color: #303F9F;
            color: #ffffff;
            box-shadow: 0 0 0 0.25rem rgba(48, 63, 159, 0.25);
        }

        .form-label {
            color: #ffffff;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .btn-primary {
            background-color: #303F9F;
            border-color: #303F9F;
            color: #ffffff;
        }

        .btn-primary:hover {
            background-color: #283593;
            border-color: #283593;
        }

        .btn-secondary {
            background-color: #424242;
            border-color: #424242;
            color: #ffffff;
        }

        .btn-secondary:hover {
            background-color: #373737;
            border-color: #373737;
        }

        .chart-container {
            background: #1a1a1a;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        
        .download-btn {
            background: #2a2a2a;
            color: #e0e0e0;
            border: 1px solid #404040;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }
        
        .download-btn:hover {
            background: #404040;
            color: #ffffff;
        }

        canvas {
            width: 100% !important;
        }

        .row {
            margin-right: -10px;
            margin-left: -10px;
        }

        .col-lg-8, .col-lg-4 {
            padding-right: 10px;
            padding-left: 10px;
        }
    </style>
</head>
<body>
    <%- include('../admin/adminPartials/sidebar') %>

    <div class="dashboard-container">
        <!-- Stats Row -->
        <div class="row mb-4">
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stat-card">
                    <div class="stat-icon stat-users text-white">
                        <i class="fas fa-users"></i>
                    </div>
                    <h3 class="fs-5 mb-1">Total Users</h3>
                    <h2 class="fs-3 mb-0"><%= totalUsers %></h2>
                </div>
            </div>
            <!-- <div class="col-xl-3 col-md-6 mb-4">
                <div class="stat-card">
                    <div class="stat-icon stat-products text-white">
                        <i class="fas fa-box"></i>
                    </div>
                    <h3 class="fs-5 mb-1">Total Products</h3>
                    <h2 class="fs-3 mb-0"><%= totalProducts %></h2>
                </div>
            </div> -->
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stat-card">
                    <div class="stat-icon stat-orders text-white">
                        <i class="fas fa-shopping-cart"></i>
                    </div>
                    <h3 class="fs-5 mb-1">Total Orders</h3>
                    <h2 class="fs-3 mb-0"><%= totalOrders %></h2>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stat-card">
                    <div class="stat-icon stat-revenue text-white">
                        <i class="fas fa-indian-rupee-sign"></i>
                    </div>
                    <h3 class="fs-5 mb-1">Total Revenue</h3>
                    <h2 class="fs-3 mb-0">â‚¹<%= (totalRevenue/100000).toFixed(1) %>L</h2>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row">
            <div class="col-lg-8">
                <div class="chart-container">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div class="d-flex align-items-center">
                            <h5 class="mb-0 me-3">Revenue & Orders Overview</h5>
                            <select class="form-select form-select-sm" style="width: auto; background: #2a2a2a; color: #e0e0e0; border-color: #404040;" onchange="updateChartData(this.value)">
                                <option value="weekly" <%- selectedRange === 'weekly' ? 'selected' : '' %>>Weekly</option>
                                <option value="monthly" <%- selectedRange === 'monthly' ? 'selected' : '' %>>Monthly</option>
                                <option value="yearly" <%- selectedRange === 'yearly' ? 'selected' : '' %>>Yearly</option>
                            </select>
                        </div>
                        <button class="download-btn" onclick="openReportModal()">
                            <i class="fas fa-download me-2"></i>Download Report
                        </button>
                    </div>
                    <div style="height: 450px;">
                        <canvas id="revenueChart"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="chart-container mb-3" style="height: 145px;">
                    <h6 class="text-light mb-2">Top Products</h6>
                    <canvas id="productsChart"></canvas>
                </div>
                <div class="chart-container mb-3" style="height: 145px;">
                    <h6 class="text-light mb-2">Top Categories</h6>
                    <canvas id="categoriesChart"></canvas>
                </div>
                <div class="chart-container" style="height: 145px;">
                    <h6 class="text-light mb-2">Top Brands</h6>
                    <canvas id="brandsChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Recent Orders -->
        <div class="recent-orders">
            <h5 class="mb-4">Recent Orders</h5>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Product</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% recentOrders.forEach(order => { %>
                            <tr>
                                <td>#ORD-<%= order._id.toString().slice(-4) %></td>
                                <td><%= order.user ? order.user.name : 'Deleted User' %></td>
                                <td><%= order.items[0].product.productName %><%= order.items.length > 1 ? ` +${order.items.length - 1} more` : '' %></td>
                                <td>â‚¹<%= order.totalAmount.toLocaleString('en-IN') %></td>
                                <td><span class="order-status status-<%= order.status.toLowerCase() %>"><%= order.status %></span></td>
                                <td><%= order.orderDate.toLocaleDateString() %></td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Report Modal -->
    <div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reportModalLabel">Generate Sales Report</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="reportDateRange" class="form-label">Report Type</label>
                        <select class="form-select" id="reportDateRange">
                            <option value="daily">Daily Report</option>
                            <option value="weekly">Weekly Report</option>
                            <option value="yearly">Yearly Report</option>
                            <option value="custom">Custom Date Range</option>
                        </select>
                    </div>

                    <div id="customDateRange" style="display: none;">
                        <div class="mb-3">
                            <label for="startDate" class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="startDate">
                        </div>
                        <div class="mb-3">
                            <label for="endDate" class="form-label">End Date</label>
                            <input type="date" class="form-control" id="endDate">
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="reportFormat" class="form-label">Report Format</label>
                        <select class="form-select" id="reportFormat">
                            <option value="pdf">PDF</option>
                            <option value="excel">Excel</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="generateReport()">Generate Report</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let revenueChart;

        // Initialize Revenue & Orders Chart
        function initializeRevenueChart(data) {
            const revenueCtx = document.getElementById('revenueChart').getContext('2d');
            revenueChart = new Chart(revenueCtx, {
                type: 'line',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Revenue',
                        data: data.revenue,
                        borderColor: '#009688',
                        backgroundColor: 'rgba(0, 150, 136, 0.1)',
                        tension: 0.4,
                        fill: true,
                        yAxisID: 'y'
                    }, {
                        label: 'Orders',
                        data: data.orders,
                        borderColor: '#3F51B5',
                        backgroundColor: 'rgba(63, 81, 181, 0.1)',
                        tension: 0.4,
                        fill: true,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    animation: {
                        duration: 1000,
                        easing: 'easeInOutQuart'
                    },
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Revenue (â‚¹)',
                                color: '#909090'
                            },
                            grid: {
                                color: '#404040'
                            },
                            ticks: {
                                color: '#909090'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Orders',
                                color: '#909090'
                            },
                            grid: {
                                drawOnChartArea: false,
                                color: '#404040'
                            },
                            ticks: {
                                color: '#909090'
                            }
                        },
                        x: {
                            grid: {
                                color: '#404040'
                            },
                            ticks: {
                                color: '#909090'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#909090'
                            }
                        }
                    }
                }
            });
        }

        // Function to update chart data
        async function updateChartData(range) {
            try {
                const response = await fetch(`/admin/dashboard/chart-data?range=${range}`, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to fetch chart data');
                }
                
                const data = await response.json();
                
                // Update chart with smooth animation
                revenueChart.data.labels = data.labels;
                revenueChart.data.datasets[0].data = data.revenue;
                revenueChart.data.datasets[1].data = data.orders;
                revenueChart.update('active');
            } catch (error) {
                console.error('Error updating chart:', error);
                alert('Failed to update chart data. Please try again.');
            }
        }

        // Initialize chart on page load with animation
        document.addEventListener('DOMContentLoaded', () => {
            const initialData = <%- JSON.stringify(chartData) %>;
            initializeRevenueChart(initialData);
        });

        // Common options for pie charts
        const pieChartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
                animateScale: true,
                animateRotate: true,
                duration: 1000,
                easing: 'easeInOutQuart'
            },
            plugins: {
                legend: {
                    position: 'right',
                    labels: {
                        color: '#909090',
                        padding: 10,
                        font: {
                            size: 11
                        },
                        boxWidth: 12
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const label = context.label || '';
                            const value = context.raw || 0;
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = Math.round((value / total) * 100);
                            return `${label}: ${value} (${percentage}%)`;
                        }
                    }
                }
            }
        };

        // Generate gradient colors
        function generateGradientColors(count) {
            const colors = [
                ['#FF6B6B', '#EE5D5D'],
                ['#4ECDC4', '#45B7AF'],
                ['#45B7AF', '#3CA69F'],
                ['#96CEB4', '#86B7A1'],
                ['#FFEEAD', '#E6D59D'],
                ['#FFD93D', '#E6C337'],
                ['#FF9F1C', '#E68F19'],
                ['#2AB7CA', '#259CB4'],
                ['#FED766', '#E6C25C'],
                ['#4CB944', '#44A73D']
            ];
            return colors.slice(0, count);
        }

        // Top Products Chart
        const productsCtx = document.getElementById('productsChart').getContext('2d');
        new Chart(productsCtx, {
            type: 'doughnut',
            data: {
                labels: <%- JSON.stringify(topProducts.map(p => p.productDetails.productName)) %>,
                datasets: [{
                    data: <%- JSON.stringify(topProducts.map(p => p.totalQuantity)) %>,
                    backgroundColor: generateGradientColors(<%- topProducts.length %>).map(color => color[0]),
                    hoverBackgroundColor: generateGradientColors(<%- topProducts.length %>).map(color => color[1]),
                    borderWidth: 2,
                    borderColor: '#2a2a2a'
                }]
            },
            options: pieChartOptions
        });

        // Top Categories Chart
        const categoriesCtx = document.getElementById('categoriesChart').getContext('2d');
        new Chart(categoriesCtx, {
            type: 'doughnut',
            data: {
                labels: <%- JSON.stringify(topCategories.map(c => c.categoryName)) %>,
                datasets: [{
                    data: <%- JSON.stringify(topCategories.map(c => c.count)) %>,
                    backgroundColor: generateGradientColors(<%- topCategories.length %>).map(color => color[0]),
                    hoverBackgroundColor: generateGradientColors(<%- topCategories.length %>).map(color => color[1]),
                    borderWidth: 2,
                    borderColor: '#2a2a2a'
                }]
            },
            options: pieChartOptions
        });

        // Top Brands Chart
        const brandsCtx = document.getElementById('brandsChart').getContext('2d');
        new Chart(brandsCtx, {
            type: 'doughnut',
            data: {
                labels: <%- JSON.stringify(topBrands.map(b => b._id)) %>,
                datasets: [{
                    data: <%- JSON.stringify(topBrands.map(b => b.count)) %>,
                    backgroundColor: generateGradientColors(<%- topBrands.length %>).map(color => color[0]),
                    hoverBackgroundColor: generateGradientColors(<%- topBrands.length %>).map(color => color[1]),
                    borderWidth: 2,
                    borderColor: '#2a2a2a'
                }]
            },
            options: pieChartOptions
        });

        // Show/hide custom date range based on selection
        document.getElementById('reportDateRange').addEventListener('change', function() {
            const customDateRange = document.getElementById('customDateRange');
            customDateRange.style.display = this.value === 'custom' ? 'block' : 'none';
        });

        // Open report modal
        function openReportModal() {
            const modal = new bootstrap.Modal(document.getElementById('reportModal'));
            modal.show();
        }

        // Generate and download report
        async function generateReport() {
            try {
                const dateRange = document.getElementById('reportDateRange').value;
                const format = document.getElementById('reportFormat').value;
                const data = {
                    dateRange,
                    format
                };

                // Add custom date range if selected
                if (dateRange === 'custom') {
                    const startDate = document.getElementById('startDate').value;
                    const endDate = document.getElementById('endDate').value;
                    
                    if (!startDate || !endDate) {
                        alert('Please select both start and end dates');
                        return;
                    }
                    
                    data.startDate = startDate;
                    data.endDate = endDate;
                }

                // Create reports directory if it doesn't exist
                const response = await fetch('/admin/generate-report', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to generate report');
                }

                // Trigger download
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `sales_report_${Date.now()}.${format === 'excel' ? 'xlsx' : 'pdf'}`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                a.remove();

                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('reportModal'));
                modal.hide();
            } catch (error) {
                console.error('Error:', error);
                alert('Error generating report: ' + error.message);
            }
        }
    </script>
</body>
</html>